{"version":3,"file":"activityselector.min.js","sources":["../src/activityselector.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Activity selector for the reindex form.\n *\n * @module core_search/activityselector\n * @copyright 2024 The Open University\n * @license http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\n\n/**\n * Obtains list of activities for Ajax autocomplete element.\n *\n * @param {String} selector Selector of the element\n * @param {String} query The query string\n * @param {Function} success Callback function to be called with an array of results\n * @param {Function} failure Callback to be called in case of failure, with error message\n */\nexport async function transport(selector, query, success, failure) {\n    // Get course id.\n    const element = document.querySelector(selector);\n    const courseSelection = element.closest('form').querySelector(\n        'select[name=courseid] ~ .form-autocomplete-selection');\n    const courseId = parseInt(courseSelection.dataset.activeValue);\n\n    // Do AJAX request to list activities on course matching query.\n    try {\n        const response = await Ajax.call([{methodname: 'core_search_get_course_activities', args: {\n            courseid: courseId,\n            query: query\n        }}]);\n        success(response);\n    } catch (e) {\n        failure(e);\n    }\n}\n\n/**\n * Processes results for Ajax autocomplete element.\n *\n * @param {String} selector Selector of the element\n * @param {Array} results Array of results\n * @return {Object[]} Array of results with 'value' and 'label' fields\n */\nexport function processResults(selector, results) {\n    const output = [];\n    for (let result of results) {\n        output.push({value: result.cmid, label: result.name});\n    }\n    return output;\n}\n"],"names":["selector","results","output","result","push","value","cmid","label","name","query","success","failure","courseSelection","document","querySelector","closest","courseId","parseInt","dataset","activeValue","response","Ajax","call","methodname","args","courseid","e"],"mappings":";;;;;;;8FA2D+BA,SAAUC,eAC/BC,OAAS,OACV,IAAIC,UAAUF,QACfC,OAAOE,KAAK,CAACC,MAAOF,OAAOG,KAAMC,MAAOJ,OAAOK,cAE5CN,0CA/BqBF,SAAUS,MAAOC,QAASC,eAGhDC,gBADUC,SAASC,cAAcd,UACPe,QAAQ,QAAQD,cAC5C,wDACEE,SAAWC,SAASL,gBAAgBM,QAAQC,uBAIxCC,eAAiBC,cAAKC,KAAK,CAAC,CAACC,WAAY,oCAAqCC,KAAM,CACtFC,SAAUT,SACVP,MAAOA,UAEXC,QAAQU,UACV,MAAOM,GACLf,QAAQe"}