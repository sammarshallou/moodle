{"version":3,"file":"selectedcourses.min.js","sources":["../src/selectedcourses.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle. If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Selected courses.\n *\n * @module     tool_dataprivacy/selectedcourses\n * @copyright  2021 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n * @since      Moodle 4.3\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Fragment from 'core/fragment';\nimport {prefetchStrings} from 'core/prefetch';\nimport {get_string as getString} from 'core/str';\n\nprefetchStrings('tool_dataprivacy', [\n    'selectedcourses',\n    'approverequest',\n    'errornoselectedcourse',\n]);\n\n/**\n * Selected Courses popup modal.\n *\n */\nexport default class SelectedCourses {\n    /**\n     * @var {String} contextId Context ID to load the fragment.\n     * @private\n     */\n    contextId = 0;\n\n    /**\n     * @var {String} requestId ID of data export request.\n     * @private\n     */\n    requestId = 0;\n\n    /**\n     * @var {Promise}\n     * @private\n     */\n    strings = null;\n\n    /**\n     * Constructor\n     *\n     * @param {String} contextId Context ID to load the fragment.\n     * @param {String} requestId ID of data export request.\n     */\n    constructor(contextId, requestId) {\n\n        this.contextId = contextId;\n        this.requestId = requestId;\n        // Now create the modal.\n        ModalFactory.create({\n            type: ModalFactory.types.SAVE_CANCEL,\n            title: getString('selectcourses', 'tool_dataprivacy'),\n            body: this.getBody({requestid: requestId}),\n            large: true,\n            removeOnClose: true,\n            buttons: {\n                save: getString('approverequest', 'tool_dataprivacy'),\n            },\n        }).then(modal => {\n                this.modal = modal;\n\n                return modal;\n            }).then(modal => {\n                // We catch the modal save event, and use it to submit the form inside the modal.\n                // Triggering a form submission will give JS validation scripts a chance to check for errors.\n                modal.getRoot().on(ModalEvents.save, this.submitForm.bind(this));\n\n                // We also catch the form submit event and use it to submit the form with ajax.\n                modal.getRoot().on('submit', 'form', this.submitFormAjax.bind(this));\n                modal.show();\n                return modal;\n            }).catch(Notification.exception);\n    }\n\n    /**\n     * Get body of modal.\n     *\n     * @method getBody\n     * @param {Object} formdata\n     * @private\n     * @return {Promise}\n     */\n    getBody = (formdata) => {\n\n        let params = null;\n        if (typeof formdata !== \"undefined\") {\n            params = {jsonformdata: JSON.stringify(formdata)};\n        }\n        // Get the content of the modal.\n        return Fragment.loadFragment('tool_dataprivacy', 'selectcourses_form', this.contextId, params);\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    submitForm = (e) => {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    /**\n     * Submit select courses form using ajax.\n     *\n     * @method submitFormAjax\n     * @private\n     * @param {Event} e Form submission event.\n     */\n    submitFormAjax = (e) => {\n\n        e.preventDefault();\n\n        // Convert all the form elements values to a serialised string.\n        let formData = this.modal.getRoot().find('form').serialize();\n\n        if (formData.indexOf('coursecontextids') === -1) {\n            const customSelect = this.modal.getRoot().find('.custom-select');\n            const invalidText = this.modal.getRoot().find('.invalid-feedback');\n            customSelect.addClass('is-invalid');\n            invalidText.attr('style', 'display: block');\n            getString('errornoselectedcourse', 'tool_dataprivacy').then(value => {\n                invalidText.empty().append(value);\n                return;\n            }).catch(Notification.exception);\n            return;\n        }\n\n        Ajax.call([{\n            methodname: 'tool_dataprivacy_submit_selected_courses_form',\n            args: {requestid: this.requestId, jsonformdata: JSON.stringify(formData)},\n            done: (data) => {\n                if (data.warnings.length > 0) {\n                    this.modal.setBody(this.getBody(formData));\n                } else {\n                    this.modal.destroy();\n                    document.location.reload();\n                }\n            },\n            fail: Notification.exception\n        }]);\n    };\n}\n"],"names":["constructor","contextId","requestId","formdata","params","jsonformdata","JSON","stringify","Fragment","loadFragment","this","e","preventDefault","modal","getRoot","find","submit","formData","serialize","indexOf","customSelect","invalidText","addClass","attr","then","value","empty","append","catch","Notification","exception","call","methodname","args","requestid","done","data","warnings","length","setBody","getBody","destroy","document","location","reload","fail","create","type","ModalFactory","types","SAVE_CANCEL","title","body","large","removeOnClose","buttons","save","on","ModalEvents","submitForm","bind","submitFormAjax","show"],"mappings":"01BAgCgB,mBAAoB,CAChC,kBACA,iBACA,wDAgCAA,YAAYC,UAAWC,4CApBX,oCAMA,kCAMF,sCA8CCC,eAEHC,OAAS,iBACW,IAAbD,WACPC,OAAS,CAACC,aAAcC,KAAKC,UAAUJ,YAGpCK,kBAASC,aAAa,mBAAoB,qBAAsBC,KAAKT,UAAWG,8CAU7EO,IACVA,EAAEC,sBACGC,MAAMC,UAAUC,KAAK,QAAQC,mDAUpBL,IAEdA,EAAEC,qBAGEK,SAAWP,KAAKG,MAAMC,UAAUC,KAAK,QAAQG,gBAEH,IAA1CD,SAASE,QAAQ,oBAA4B,OACvCC,aAAeV,KAAKG,MAAMC,UAAUC,KAAK,kBACzCM,YAAcX,KAAKG,MAAMC,UAAUC,KAAK,4BAC9CK,aAAaE,SAAS,cACtBD,YAAYE,KAAK,QAAS,0CAChB,wBAAyB,oBAAoBC,MAAKC,QACxDJ,YAAYK,QAAQC,OAAOF,UAE5BG,MAAMC,sBAAaC,yBAIrBC,KAAK,CAAC,CACPC,WAAY,gDACZC,KAAM,CAACC,UAAWxB,KAAKR,UAAWG,aAAcC,KAAKC,UAAUU,WAC/DkB,KAAOC,OACCA,KAAKC,SAASC,OAAS,OAClBzB,MAAM0B,QAAQ7B,KAAK8B,QAAQvB,iBAE3BJ,MAAM4B,UACXC,SAASC,SAASC,WAG1BC,KAAMhB,sBAAaC,qBA/FlB7B,UAAYA,eACZC,UAAYA,iCAEJ4C,OAAO,CAChBC,KAAMC,uBAAaC,MAAMC,YACzBC,OAAO,mBAAU,gBAAiB,oBAClCC,KAAM1C,KAAK8B,QAAQ,CAACN,UAAWhC,YAC/BmD,OAAO,EACPC,eAAe,EACfC,QAAS,CACLC,MAAM,mBAAU,iBAAkB,uBAEvChC,MAAKX,aACKA,MAAQA,MAENA,SACRW,MAAKX,QAGJA,MAAMC,UAAU2C,GAAGC,sBAAYF,KAAM9C,KAAKiD,WAAWC,KAAKlD,OAG1DG,MAAMC,UAAU2C,GAAG,SAAU,OAAQ/C,KAAKmD,eAAeD,KAAKlD,OAC9DG,MAAMiD,OACCjD,SACRe,MAAMC,sBAAaC"}